//! –í–∏–¥–µ–æ - 1:26:20...2:01:39

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
import '../css/common.css';

// –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∏–º–µ–Ω–∞–º–∏ "–ª–æ—à–∞–¥–µ–π".
const horses = [
  'Secretariat',
  'Eclipse',
  'West Australian',
  'Flying Fox',
  'Seabiscuit',
];

//!===========================================================

//! –†–∞–±–æ—Ç–∞–µ–º —Å –æ–¥–Ω–∏–º "–ø—Ä–æ–º–∏—Å–æ–º".

// –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ - "–ø—Ä–æ—Å—Ç–π –∑–∞–±–µ–≥ –æ–¥–Ω–æ–π –ª–æ—à–∞–¥–∏".
// function run(horse) { 
//   return new Promise((resolve) => {

//     // –í—Ä–µ–º–µ–Ω–Ω–æ–π "—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä".
//     const time = getRandomTime(2000, 3500);

//     setTimeout(() => {
//       resolve({horse, time});
//     }, time);

//   });
// }

// –í—Å–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–ª-–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è - "–≤—Ä–µ–º–µ–Ω–∏".
// function getRandomTime(min, max) { 
//   return Math.floor(Math.random() * (max - min) + min);
// }

// –ó–∞–ø—É—Å–∫–∞–µ–º "–∑–∞–±–µ–≥".
// run('–ú–∞–Ω–≥–æ').then(x => console.log(x));

// –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –±—É–¥–µ—Ç –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è "–ø—Ä–æ–º–∏—Å–æ–º". –ü—Ä–∏ —ç—Ç–æ–º, –≤ –æ–±—ä–µ–∫—Ç–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –Ω–∞–º–∏ "–∏–º—è –ª–æ—à–∞–¥–∏" –∏ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ –∫ —Ñ–∏–Ω–∏—à—É (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ "–≤—Ä–µ–º–µ–Ω–∏"), —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∫–æ–¥ –∏ —Å–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å.

//!===========================================================

//! –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ "–ø—Ä–æ–º–∏—Å–æ–≤".

// –§—É–Ω–∫—Ü–∏—è - "–∑–∞–±–µ–≥".
// function run(horse) { 
//   return new Promise((resolve) => {

//     const time = getRandomTime(2000, 3500);

//     setTimeout(() => {
//       resolve({horse, time});
//     }, time);

//   });
// }

// –í—Å–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–ª-–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—è - "–≤—Ä–µ–º–µ–Ω–∏".
// function getRandomTime(min, max) { 
//   return Math.floor(Math.random() * (max - min) + min);
// }

// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é "promises" –∏ –∑–∞–¥–∞–µ–º –µ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è -> —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ –∏–º–µ –ª–æ—à–∞–¥–µ–π "horses", –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–∞—è –ª–æ—à–∞–¥—å –ø—Ä–æ–±–µ–∂–∞–ª–∞ –∑–∞–±–µ–≥ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é "run()".
// 1-–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏.
// const promises = horses.map(horse => run(horse));

// 2-–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏.
// const promises = horses.map(run);

// –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –º–∞—Å—Å–∏–≤ "–ø—Ä–æ–º–∏—Å–æ–≤".
// console.log("promises =>", promises);

/*
 * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞
 */
// –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ "–ø—Ä–æ–º–∏—Å–æ–≤", –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ -> —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π, –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, "–ø—Ä–æ–º–∏—Å". –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –º–µ—Ç–æ–¥ "Promise.race([])" –≤–µ—Ä–Ω–µ—Ç –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç - "—Å —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π –ª–æ—à–∞–¥—å—é".

// Promise.race(promises).then(x => console.log(x));


/*
 * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤
 */
// –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ "–ø—Ä–æ–º–∏—Å–æ–≤", –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é "–ø—Ä–æ–º–∏—Å–æ–≤", –ø–æ—Å–ª–µ –∏—Ö –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –º–µ—Ç–æ–¥ "Promise.all([])" –≤–µ—Ä–Ω–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.

// Promise.all(promises).then(x => console.log(x));


//!===========================================================

//! –†–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ "–ø—Ä–æ–º–∏—Å–æ–≤" —Å –≤–Ω–µ—à–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞.

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - "—Å—á–µ—Ç—á–∏–∫ –∑–∞–±–µ–≥–æ–≤" –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞.
let raceCounter = 0;

// –û–±—ä–µ–∫—Ç-—Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–µ–≥–∏ –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ —Ä–∞–∑–º–µ—Ç–∫–µ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞.
const refs = {
  startBtn: document.querySelector('.js-start-race'),
  winnerField: document.querySelector('.js-winner'),
  progressField: document.querySelector('.js-progress'),
  tableBody: document.querySelector('.js-results-table > tbody'),
};

// "–í–µ—à–∞–µ–º" —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É "—Å—Ç–∞—Ä—Ç–∞ –∑–∞–±–µ–≥–∞", –∏ –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è 'click' –Ω–∞ –Ω–µ–π - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–ª–ª-–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—é "onStart".
refs.startBtn.addEventListener('click', onStart);

// –ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ "—Å—Ç–∞—Ä—Ç–∞ –∑–∞–±–µ–≥–∞", –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–æ–ª—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–±—Ä–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
function onStart() {
  raceCounter += 1;
  const promises = horses.map(run);

  updateWinnerField('');
  updateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');
  determineWinner(promises);
  waitForAll(promises);
}

// –§—É–Ω–∫—Ü–∏—è - "–∑–∞–±–µ–≥".
function run(horse) {
  return new Promise(resolve => {
    const time = getRandomTime(2000, 3500);

    setTimeout(() => {
      resolve({ horse, time });
    }, time);
  });
}

// –§—É–Ω–∫—Ü–∏—è - "–≤—Ä–µ–º–µ–Ω–∏".
function getRandomTime(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}

// –§—É–Ω–∫—Ü–∏—è - "–æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∑–∞–±–µ–≥–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª—É–∂–µ–±–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è".
function updateWinnerField(message) {
  refs.winnerField.textContent = message;
}

// –§—É–Ω–∫—Ü–∏—è - "–≤—ã–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è".
function updateProgressField(message) {
  refs.progressField.textContent = message;
}

// –§—É–Ω–∫—Ü–∏—è - "–ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∑–∞–µ–∑–¥–∞".
function determineWinner(horsesP) {
  Promise.race(horsesP).then(({ horse, time }) => {
    updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}
    –≤—Ä–µ–º–µ–Ω–∏`);
    updateResultsTable({ horse, time, raceCounter });
  });
}

// –§—É–Ω–∫—Ü–∏—è - "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤".
function updateResultsTable({ horse, time, raceCounter }) {
  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;
  refs.tableBody.insertAdjacentHTML('beforeend', tr);
}

// –§—É–Ω–∫—Ü–∏—è - "–æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–µ–∑–¥–∞".
function waitForAll(horsesP) {
  Promise.all(horsesP).then(() => {
    updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');
  });
}








